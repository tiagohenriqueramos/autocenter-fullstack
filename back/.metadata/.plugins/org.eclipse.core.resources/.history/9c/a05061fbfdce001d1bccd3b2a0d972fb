package br.com.tiagohenriqueramos.autocenter.service;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import br.com.tiagohenriqueramos.autocenterfullstack.entities.Funcionario;
import br.com.tiagohenriqueramos.autocenterfullstack.repositories.FuncionarioRepository;
import br.com.tiagohenriqueramos.autocenterfullstack.service.exceptions.ResourceNotFoundException;
import jakarta.persistence.EntityNotFoundException;

@Service
public class FuncionarioServiceImpl implements FuncionarioService {

	DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern("dd/MM/yyyy");

	@Autowired
	private FuncionarioRepository funcionarioRepository;

	public List<Funcionario> findAll() {
		return funcionarioRepository.findAll();
	}

	@Override
	public List<Funcionario> listarFuncionarios() {
		List<Funcionario> listaFuncionarios = funcionarioRepository
				.findAll((Sort.by(Sort.Direction.ASC, "id")));
		return listaFuncionarios;
	}

	@Override
	public Funcionario buscarPorId(Long id) {
		Optional<Funcionario> funcionario = funcionarioRepository.findById(id);
		return funcionario.orElseThrow(() -> new ResourceNotFoundException("Sem funcionario com essa Id informada!"));
	}

	@Override
	public Funcionario cadastrarFuncionario(Funcionario funcionario) {
		return funcionarioRepository.save(funcionario);
	}

	@Override
	public void deletarFuncionario(Long id) {

		try {
			funcionarioRepository.deleteById(id);
		} catch (EntityNotFoundException e) {
			throw new ResourceNotFoundException("Funcionario não encotrado!");
		}
	}

	@Override
	public Funcionario editarFuncionario(Long id, Funcionario novoFuncionario) {

		try {
			Funcionario funcionario = funcionarioRepository.getReferenceById(id);
			atualizarDados(novoFuncionario, funcionario);
			return funcionarioRepository.save(funcionario);
		} catch (EntityNotFoundException e) {
			throw new ResourceNotFoundException("Funcionario não encontrado!");
		}
	}

	public void atualizarDados(Funcionario novoFuncionario, Funcionario funcionario) {
		funcionario.setMatricula(novoFuncionario.getMatricula());
		funcionario.setNome(novoFuncionario.getNome());
	}

}
